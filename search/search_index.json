{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cours SNT/NSI SNT Seconde lien NSI Premi\u00e8re lien NSI Terminale lien","title":"Cours SNT/NSI"},{"location":"#cours-sntnsi","text":"","title":"Cours SNT/NSI"},{"location":"#snt-seconde","text":"lien","title":"SNT Seconde"},{"location":"#nsi-premiere","text":"lien","title":"NSI Premi\u00e8re"},{"location":"#nsi-terminale","text":"lien","title":"NSI Terminale"},{"location":"Premiere/","text":"Cours de NSI - Premiere Les algorithmes de tri Cours Exercices","title":"Cours de NSI - Premiere"},{"location":"Premiere/#cours-de-nsi-premiere","text":"","title":"Cours de NSI - Premiere"},{"location":"Premiere/#les-algorithmes-de-tri","text":"Cours Exercices","title":"Les algorithmes de tri"},{"location":"Premiere/LesTris/Cours/","text":"Les algorithmes de tri 1. Introduction Qu'est-ce qu'un algorithme de tri ? Un algorithme de tri est un algorithme qui permet de trier une liste d'\u00e9l\u00e9ments. Par exemple, on peut trier une liste de nombres, une liste de mots, une liste de personnes, etc. Pourquoi trier ? Le tri permet de retrouver plus facilement un \u00e9l\u00e9ment dans la liste et de gagner \u00e9norm\u00e9ment de temps de recherche. Comment trier ? Il existe de nombreux algorithmes de tri. Chaque algorithme a ses avantages et ses inconv\u00e9nients. Certains algorithmes sont plus adapt\u00e9s pour trier des listes de nombres, d'autres pour trier des listes de mots, etc. 2. Activit\u00e9 Prenez un jeu de cartes et triez-le en utilisant la m\u00e9thode de votre choix. Comparez votre m\u00e9thode avec celle des autres groupes. Rem\u00e9langez le paquet et triez le selon l'algorithme suivant (du tri par selection): On recherche le plus petit \u00e9l\u00e9ment de la liste On inverse sa place avec l'\u00e9lement juste \u00e0 la suite du dernier \u00e9l\u00e9ment tri\u00e9 de la liste On recommence jusqu'\u00e0 ce que la fin de la liste soit atteinte 3. Le tri par s\u00e9lection Le tri par s\u00e9lection est un algorithme de tri qui consiste \u00e0 parcourir la liste \u00e0 trier et \u00e0 placer les \u00e9l\u00e9ments dans l'ordre croissant (ou d\u00e9croissant). On recherche le premier \u00e9l\u00e9ment de le liste (ici le plus petit) On inverse sa place avec le premier \u00e9l\u00e9ment non-tri\u00e9 de la liste On recommence jusqu'\u00e0 ce que la fin de la liste Exemple : On souhaite trier la liste suivante : ['e', 'b', 'd', 'c', 'a'] On recherche le plus petit \u00e9l\u00e9ment de la liste : 'a' On le place en position 0 en l'inversant avec 'e' On recommence avec la liste ['a', 'b', 'd', 'c', 'e'] Etape Liste \u00e0 trier Partie tri\u00e9e 0 [ 'e', 'b', 'd', 'c', 'a' ] [-, -, -, -, -] 1 ['a', 'b', 'd', 'c', 'e' ] ['a', -, -, -, -] 2 ['a', 'b', 'd', 'c', 'e' ] ['a', 'b', -, -, -] 3 ['a', 'b', 'c', 'd', 'e' ] ['a', 'b', 'c', -, -] 4 ['a', 'b', 'c', 'd', 'e' ] ['a', 'b', 'c', 'd', -] 5 ['a', 'b', 'c', 'd', 'e'] ['a', 'b', 'c', 'd', 'e'] Cet algorithme est simple \u00e0 comprendre et \u00e0 mettre en oeuvre. Cependant, il est tr\u00e8s lent. En effet, pour trier une liste de 10000 \u00e9l\u00e9ments, il faut effectuer 10000 recherches qui chacune demande de parcourir toute la liste. C'est beaucoup trop long ! Question 1 Quelle est la complexit\u00e9 de cet algorithme ? Question 2 On va chercher \u00e0 impl\u00e9menter cette algorithme en Python. Pour cela on va utiliser une fonction echanger qui permet d'\u00e9changer deux \u00e9l\u00e9ments d'une liste. Question 3 Impl\u00e9mentez une fonction qui permette de trouver l'indice du plus petit \u00e9l\u00e9ment d'une liste \u00e0 partir d'un indice donn\u00e9. Question 4 En utilisant les fonctions pr\u00e9c\u00e9dentes, impl\u00e9mentez l'algorithme de tri par s\u00e9lection. Vous pouvez vous appuyer sur l'algorithme \u00e9crit pr\u00e9c\u00e9demment et sur le code suivant : def tri_selection(liste): for i in range(len(liste)): # On cherche le plus petit \u00e9l\u00e9ment de la liste # On l'\u00e9change avec le premier \u00e9l\u00e9ment non-tri\u00e9 Question 5 Testez votre algorithme sur une liste de 10000 \u00e9l\u00e9ments. Combien de temps met-il pour trier la liste ? 4. Le tri par insertion Le tri par insertion est un algorithme de tri qui consiste \u00e0 parcourir la liste et \u00e0 ins\u00e9rer chaque \u00e9l\u00e9ment \u00e0 sa place dans une nouvelle liste. Pour ins\u00e9rer un \u00e9l\u00e9ment \u00e0 sa place dans la nouvelle liste, on le compare avec les \u00e9l\u00e9ments d\u00e9j\u00e0 pr\u00e9sents dans la nouvelle liste. On ins\u00e8re l'\u00e9l\u00e9ment \u00e0 sa place d\u00e8s qu'on trouve un \u00e9l\u00e9ment plus grand que lui. On parcourt la liste de ce qui n'est pas encore tri\u00e9 jusqu'\u00e0 trouver un \u00e9l\u00e9ment mal plac\u00e9 par rapport au pr\u00e9c\u00e9dent (ici un \u00e9l\u00e9ment plus petit) Tant que l'\u00e9l\u00e9ment est mal plac\u00e9 (plus petit que le pr\u00e9c\u00e9dent), on l'inverse avec le pr\u00e9c\u00e9dent On recommence jusqu'\u00e0 la fin de la liste Exemple : On souhaite trier la liste suivante : [5, 2, 4, 3, 1] Etape Liste \u00e0 trier Liste tri\u00e9e 0 [ 5, 2, 4, 3, 1 ] [5] 1 [5, 2, 4, 3, 1 ] [2, 5] 2 [2, 5, 4, 3, 1 ] [2, 4, 5] 3 [2, 4, 5, 3, 1 ] [2, 3, 4, 5] 4 [2, 3, 4, 5, 1 ] [1, 2, 3, 4, 5] Question 6 Quelle est la complexit\u00e9 de cet algorithme ? Question 7 Impl\u00e9mentez cet algorithme en Python. 5. Autres algorithmes de tri Il existe de nombreux autres algorithmes de tri, le tri-fusion et le tri-rapide sont les plus connus. Ces algorithmes sont plus complexes \u00e0 comprendre et \u00e0 mettre en oeuvre. Cependant, ils sont beaucoup plus rapides que les algorithmes pr\u00e9c\u00e9dents. Vous les verrez plus en d\u00e9tail l'ann\u00e9e prochaine. 6. Pour aller plus loin Ces algorithmes fonctionnent pour trier des listes de nombres ou de mot car on sais comment les comparer. Mais comment trier une liste d'objets ? Par exemple, comment trier une liste de personnes ? Pour cela, il faut d\u00e9finir une fonction de comparaison qui permet de comparer deux personnes. On peut alors utiliser cette fonction de comparaison pour trier la liste de personnes. Question bonus Cr\u00e9ez une classe Personne avec un attribut age et cr\u00e9ez une liste de personnes que vous remplissez avec des personnes de diff\u00e9rents ages. Impl\u00e9mentez une fonction de comparaison pour trier une liste de personnes par age. Et adaptez un de vos algorithmes de tri pour trier cette liste de personnes.","title":"Les algorithmes de tri"},{"location":"Premiere/LesTris/Cours/#les-algorithmes-de-tri","text":"","title":"Les algorithmes de tri"},{"location":"Premiere/LesTris/Cours/#1-introduction","text":"","title":"1. Introduction"},{"location":"Premiere/LesTris/Cours/#quest-ce-quun-algorithme-de-tri","text":"Un algorithme de tri est un algorithme qui permet de trier une liste d'\u00e9l\u00e9ments. Par exemple, on peut trier une liste de nombres, une liste de mots, une liste de personnes, etc.","title":"Qu'est-ce qu'un algorithme de tri ?"},{"location":"Premiere/LesTris/Cours/#pourquoi-trier","text":"Le tri permet de retrouver plus facilement un \u00e9l\u00e9ment dans la liste et de gagner \u00e9norm\u00e9ment de temps de recherche.","title":"Pourquoi trier ?"},{"location":"Premiere/LesTris/Cours/#comment-trier","text":"Il existe de nombreux algorithmes de tri. Chaque algorithme a ses avantages et ses inconv\u00e9nients. Certains algorithmes sont plus adapt\u00e9s pour trier des listes de nombres, d'autres pour trier des listes de mots, etc.","title":"Comment trier ?"},{"location":"Premiere/LesTris/Cours/#2-activite","text":"Prenez un jeu de cartes et triez-le en utilisant la m\u00e9thode de votre choix. Comparez votre m\u00e9thode avec celle des autres groupes. Rem\u00e9langez le paquet et triez le selon l'algorithme suivant (du tri par selection): On recherche le plus petit \u00e9l\u00e9ment de la liste On inverse sa place avec l'\u00e9lement juste \u00e0 la suite du dernier \u00e9l\u00e9ment tri\u00e9 de la liste On recommence jusqu'\u00e0 ce que la fin de la liste soit atteinte","title":"2. Activit\u00e9"},{"location":"Premiere/LesTris/Cours/#3-le-tri-par-selection","text":"Le tri par s\u00e9lection est un algorithme de tri qui consiste \u00e0 parcourir la liste \u00e0 trier et \u00e0 placer les \u00e9l\u00e9ments dans l'ordre croissant (ou d\u00e9croissant). On recherche le premier \u00e9l\u00e9ment de le liste (ici le plus petit) On inverse sa place avec le premier \u00e9l\u00e9ment non-tri\u00e9 de la liste On recommence jusqu'\u00e0 ce que la fin de la liste Exemple : On souhaite trier la liste suivante : ['e', 'b', 'd', 'c', 'a'] On recherche le plus petit \u00e9l\u00e9ment de la liste : 'a' On le place en position 0 en l'inversant avec 'e' On recommence avec la liste ['a', 'b', 'd', 'c', 'e'] Etape Liste \u00e0 trier Partie tri\u00e9e 0 [ 'e', 'b', 'd', 'c', 'a' ] [-, -, -, -, -] 1 ['a', 'b', 'd', 'c', 'e' ] ['a', -, -, -, -] 2 ['a', 'b', 'd', 'c', 'e' ] ['a', 'b', -, -, -] 3 ['a', 'b', 'c', 'd', 'e' ] ['a', 'b', 'c', -, -] 4 ['a', 'b', 'c', 'd', 'e' ] ['a', 'b', 'c', 'd', -] 5 ['a', 'b', 'c', 'd', 'e'] ['a', 'b', 'c', 'd', 'e'] Cet algorithme est simple \u00e0 comprendre et \u00e0 mettre en oeuvre. Cependant, il est tr\u00e8s lent. En effet, pour trier une liste de 10000 \u00e9l\u00e9ments, il faut effectuer 10000 recherches qui chacune demande de parcourir toute la liste. C'est beaucoup trop long !","title":"3. Le tri par s\u00e9lection"},{"location":"Premiere/LesTris/Cours/#question-1","text":"Quelle est la complexit\u00e9 de cet algorithme ?","title":"Question 1"},{"location":"Premiere/LesTris/Cours/#question-2","text":"On va chercher \u00e0 impl\u00e9menter cette algorithme en Python. Pour cela on va utiliser une fonction echanger qui permet d'\u00e9changer deux \u00e9l\u00e9ments d'une liste.","title":"Question 2"},{"location":"Premiere/LesTris/Cours/#question-3","text":"Impl\u00e9mentez une fonction qui permette de trouver l'indice du plus petit \u00e9l\u00e9ment d'une liste \u00e0 partir d'un indice donn\u00e9.","title":"Question 3"},{"location":"Premiere/LesTris/Cours/#question-4","text":"En utilisant les fonctions pr\u00e9c\u00e9dentes, impl\u00e9mentez l'algorithme de tri par s\u00e9lection. Vous pouvez vous appuyer sur l'algorithme \u00e9crit pr\u00e9c\u00e9demment et sur le code suivant : def tri_selection(liste): for i in range(len(liste)): # On cherche le plus petit \u00e9l\u00e9ment de la liste # On l'\u00e9change avec le premier \u00e9l\u00e9ment non-tri\u00e9","title":"Question 4"},{"location":"Premiere/LesTris/Cours/#question-5","text":"Testez votre algorithme sur une liste de 10000 \u00e9l\u00e9ments. Combien de temps met-il pour trier la liste ?","title":"Question 5"},{"location":"Premiere/LesTris/Cours/#4-le-tri-par-insertion","text":"Le tri par insertion est un algorithme de tri qui consiste \u00e0 parcourir la liste et \u00e0 ins\u00e9rer chaque \u00e9l\u00e9ment \u00e0 sa place dans une nouvelle liste. Pour ins\u00e9rer un \u00e9l\u00e9ment \u00e0 sa place dans la nouvelle liste, on le compare avec les \u00e9l\u00e9ments d\u00e9j\u00e0 pr\u00e9sents dans la nouvelle liste. On ins\u00e8re l'\u00e9l\u00e9ment \u00e0 sa place d\u00e8s qu'on trouve un \u00e9l\u00e9ment plus grand que lui. On parcourt la liste de ce qui n'est pas encore tri\u00e9 jusqu'\u00e0 trouver un \u00e9l\u00e9ment mal plac\u00e9 par rapport au pr\u00e9c\u00e9dent (ici un \u00e9l\u00e9ment plus petit) Tant que l'\u00e9l\u00e9ment est mal plac\u00e9 (plus petit que le pr\u00e9c\u00e9dent), on l'inverse avec le pr\u00e9c\u00e9dent On recommence jusqu'\u00e0 la fin de la liste Exemple : On souhaite trier la liste suivante : [5, 2, 4, 3, 1] Etape Liste \u00e0 trier Liste tri\u00e9e 0 [ 5, 2, 4, 3, 1 ] [5] 1 [5, 2, 4, 3, 1 ] [2, 5] 2 [2, 5, 4, 3, 1 ] [2, 4, 5] 3 [2, 4, 5, 3, 1 ] [2, 3, 4, 5] 4 [2, 3, 4, 5, 1 ] [1, 2, 3, 4, 5]","title":"4. Le tri par insertion"},{"location":"Premiere/LesTris/Cours/#question-6","text":"Quelle est la complexit\u00e9 de cet algorithme ?","title":"Question 6"},{"location":"Premiere/LesTris/Cours/#question-7","text":"Impl\u00e9mentez cet algorithme en Python.","title":"Question 7"},{"location":"Premiere/LesTris/Cours/#5-autres-algorithmes-de-tri","text":"Il existe de nombreux autres algorithmes de tri, le tri-fusion et le tri-rapide sont les plus connus. Ces algorithmes sont plus complexes \u00e0 comprendre et \u00e0 mettre en oeuvre. Cependant, ils sont beaucoup plus rapides que les algorithmes pr\u00e9c\u00e9dents. Vous les verrez plus en d\u00e9tail l'ann\u00e9e prochaine.","title":"5. Autres algorithmes de tri"},{"location":"Premiere/LesTris/Cours/#6-pour-aller-plus-loin","text":"Ces algorithmes fonctionnent pour trier des listes de nombres ou de mot car on sais comment les comparer. Mais comment trier une liste d'objets ? Par exemple, comment trier une liste de personnes ? Pour cela, il faut d\u00e9finir une fonction de comparaison qui permet de comparer deux personnes. On peut alors utiliser cette fonction de comparaison pour trier la liste de personnes.","title":"6. Pour aller plus loin"},{"location":"Premiere/LesTris/Cours/#question-bonus","text":"Cr\u00e9ez une classe Personne avec un attribut age et cr\u00e9ez une liste de personnes que vous remplissez avec des personnes de diff\u00e9rents ages. Impl\u00e9mentez une fonction de comparaison pour trier une liste de personnes par age. Et adaptez un de vos algorithmes de tri pour trier cette liste de personnes.","title":"Question bonus"},{"location":"Seconde/","text":"Cours de SNT 1. Photographie num\u00e9rique Cours Exercices","title":"Cours de SNT"},{"location":"Seconde/#cours-de-snt","text":"","title":"Cours de SNT"},{"location":"Seconde/#1-photographie-numerique","text":"Cours Exercices","title":"1. Photographie num\u00e9rique"},{"location":"Terminale/","text":"Cours NSI - Terminale Recherche textuelle Cours","title":"Cours NSI - Terminale"},{"location":"Terminale/#cours-nsi-terminale","text":"","title":"Cours NSI - Terminale"},{"location":"Terminale/#recherche-textuelle","text":"Cours","title":"Recherche textuelle"},{"location":"Terminale/RechercheTextuelle/Cours/","text":"Recherche textuelle Introduction La recherche textuelle est un domaine de l'informatique qui consiste \u00e0 rechercher un mot ou une expression dans un texte. Rappel : un texte est une suite de caract\u00e8res. La chaine \"chat\" par exemple correspond au tableau de charact\u00e8res suivant : ['c', 'h', 'a', 't'] Exemple : On souhaite rechercher le mot \"chat\" dans le texte suivant : \"Le chat est un animal domestique de la famille des f\u00e9lid\u00e9s.\" M\u00e9thode na\u00efve La m\u00e9thode na\u00efve consiste \u00e0 parcourir le texte et \u00e0 comparer chaque caract\u00e8re avec le premier caract\u00e8re du mot recherch\u00e9. Si le caract\u00e8re est identique, on compare le caract\u00e8re suivant avec le deuxi\u00e8me caract\u00e8re du mot recherch\u00e9. On recommence jusqu'\u00e0 ce que tous les caract\u00e8res du mot recherch\u00e9 soient identiques. Question 1 Impl\u00e9mentez cet algorithme en Python. Testez-le avec le texte et le mot \"chat\", puis avec le texte et le mot \"chien\". def rechercheNaive(texte, mot): \"\"\" Recherche le mot dans le texte @param texte: str, le texte dans lequel on recherche le mot @param mot: str, le mot \u00e0 rechercher @return: bool \"\"\" Cette m\u00e9thode fonctionne mais elle est tr\u00e8s lente. Si le mot recherch\u00e9 n'est pas dans le texte on doit quand meme r\u00e9aliser toutes les comparaisons avec chacun des caract\u00e8res du texte. On va donc chercher \u00e0 am\u00e9liorer cet algorithme. M\u00e9thode de Boyer-Moore Horspool La m\u00e9thode de Boyer-Moore est un algorithme de recherche textuelle se base sur 2 principes pour am\u00e9liorer la recherche : Comparer les caract\u00e8res du mot recherch\u00e9 en commen\u00e7ant par la fin du mot. Utiliser une table de correspondance qui permet de sauter des caract\u00e8res du texte lorsqu'ils ne correspondent pas au caract\u00e8re recherch\u00e9. D\u00e9roulement de l\u2019algorithme Pour l'exemple on recherchera le mot \"chat\" dans le texte suivant : \"Le croustichat\" On commence la recherche \u00e0 l\u2019index 3 : un croustichat chat ^ Il n\u2019y a pas de correspondance \u00e0 la fin du mot : 't' != 'c', donc on avance, mais de combien de caract\u00e8res avance-t-on ? Pour le d\u00e9cider, on utilise le fait que le caract\u00e8re 'c' apparait 3 charact\u00e8res plus loin dans le mot cherch\u00e9, donc on peut avancer de 3 caract\u00e8res sans crainte de rater le mot. On recherche donc \u00e0 l\u2019indice 3 + 3 = 6 : un croustichat chat ^ 'u' est diff\u00e9rent de 'a', on va donc avancer. Mais cette fois, le caract\u00e8re 'u' n\u2019apparait pas dans le mot cherch\u00e9, donc on peut avancer de la taille du mot cherch\u00e9. On recherche donc \u00e0 l\u2019indice 6 + 4 = 10 : un croustichat chat ^ Cette fois 'c' fais parti du mot recherch\u00e9, on peut donc avancer selon sa position. Ici 'a' est le 4\u00e8me caract\u00e8re du mot cherch\u00e9, donc on avance de 3 caract\u00e8res. On recherche donc \u00e0 l\u2019indice 10 + 3 = 13 : un croustichat chat ^ Cette fois, 'c' est bien pr\u00e9sent dans le mot cherch\u00e9, on peut donc commencer \u00e0 comparer les caract\u00e8res du mot cherch\u00e9 en commen\u00e7ant par la fin. On compare donc 'c' et 'c', puis 'h' et 'h', puis 'a' et 'a', puis 't' et 't'. Tous les caract\u00e8res sont identiques, on a donc trouv\u00e9 le mot cherch\u00e9. Table de correspondance Pour pouvoir avancer de plusieurs caract\u00e8res, on va utiliser une table de correspondance qui permet de savoir de combien on peut avancer en fonction du caract\u00e8re du texte. Pour le mot \"chat\", la table de correspondance est la suivante : Caract\u00e8re c h a t (autres charact\u00e8res) Index 3 2 1 0 4 Si une lettre se r\u00e9p\u00e8te plusieurs fois, on veut uniquement sa derni\u00e8re position dans le mot car on compare en commen\u00e7ant par la fin. Le mot \"abcba\" aura donc la m\u00eame table de correspondance : Caract\u00e8re a c b (autres charact\u00e8res) Index 3 2 1 3 Question 2 Tracez la table de correspondance, puis appliquez l'algorithme de Boyer-Moore Horspool pour la recherche du mot \"anim\" dans le texte \"Un petit animal\" Impl\u00e9mentation en Python Question 3 Ecrivez une fonction tableCorrespondance qui prend en param\u00e8tre un mot et qui renvoi la table de correspondance associ\u00e9e. On utilisera un dictionnaire pour stocker la table de correspondance. def tableCorrespondance(mot): \"\"\"Renvoi un dictionnaire repr\u00e9sentant la table de correspondance associ\u00e9e au mot. @Args : mot : le mot dont on veut la table de correspondance @Return : dict : la table de correspondance associ\u00e9e au mot \"\"\" tableCorrespondance(\"chat\") renverra le dictionnaire suivant : {'c': 3, 'h': 2, 'a': 1, 't': 0} Question 4 Gr\u00e2ce \u00e0 la table de correspondance, on peut maintenant \u00e9crire une fonction avancer qui prend en param\u00e8tre un texte, un mot \u00e0 chercher et un indice du dernier charact\u00e8re du mot \u00e0 partir duquel on va tester et qui renvoi l'indice \u00e0 partir duquel on doit rechercher le mot suivant. def avancer(texte, mot, indice): \"\"\" Renvoi l'indice \u00e0 partir duquel on doit rechercher le mot suivant. @Args texte: str, le texte dans lequel on recherche le mot mot: str, le mot \u00e0 rechercher indice: int, l'indice du dernier charact\u00e8re du mot \u00e0 partir duquel on va tester @Return: int, l'indice \u00e0 partir duquel on doit rechercher le mot suivant \"\"\" Question 5 Impl\u00e9mentez en Python une fonction memeMot telle que : def memeMot(texte, mot, indice): \"\"\" Verifie \u00e0 partir de l'indice de dernier charact\u00e8re \"indice\" si le mot \"mot\" correspond \u00e0 celui dans le texte. Renvoi l'indice du premier charact\u00e8re diff\u00e9rent ou -1 si le mot correspond. \"\"\" memeMot(\"un croustichat\", \"chat\", 6) comparera \"chat\" avec \"crou\" et renverra 0 car le premier charact\u00e8re diff\u00e9rent est 'u' \u00e0 l'indice 0. memeMot(\"un croustichat\", \"chat\", 13) comparera \"chat\" avec \"chat\" et renverra -1 car les mots sont identiques. Cette fonction sera utilis\u00e9e pour tester si le mot recherch\u00e9 est pr\u00e9sent \u00e0 un indice donn\u00e9 du texte. Question 6 Utilisez les fonctions pr\u00e9c\u00e9dentes pour compl\u00e9ter le code de la fonction rechercheBoyerMoore qui prend en param\u00e8tre un texte et un mot et qui renvoi si le mot est pr\u00e9sent dans le texte. Le code \u00e0 compl\u00e9ter est disponible dans le fichier rechercheBoyerMoore.py Vous pourrez tester votre code avec le code suivant : # Tests assert recherche_mot_boyer('Le croustichat', 'chat') assert recherche_mot_boyer('Le croustichat', 'chien') is False assert recherche_mot_boyer('Le croustichat', 'crou') assert recherche_mot_boyer('Le croustichat', 'alice') is False","title":"Recherche textuelle"},{"location":"Terminale/RechercheTextuelle/Cours/#recherche-textuelle","text":"","title":"Recherche textuelle"},{"location":"Terminale/RechercheTextuelle/Cours/#introduction","text":"La recherche textuelle est un domaine de l'informatique qui consiste \u00e0 rechercher un mot ou une expression dans un texte. Rappel : un texte est une suite de caract\u00e8res. La chaine \"chat\" par exemple correspond au tableau de charact\u00e8res suivant : ['c', 'h', 'a', 't'] Exemple : On souhaite rechercher le mot \"chat\" dans le texte suivant : \"Le chat est un animal domestique de la famille des f\u00e9lid\u00e9s.\"","title":"Introduction"},{"location":"Terminale/RechercheTextuelle/Cours/#methode-naive","text":"La m\u00e9thode na\u00efve consiste \u00e0 parcourir le texte et \u00e0 comparer chaque caract\u00e8re avec le premier caract\u00e8re du mot recherch\u00e9. Si le caract\u00e8re est identique, on compare le caract\u00e8re suivant avec le deuxi\u00e8me caract\u00e8re du mot recherch\u00e9. On recommence jusqu'\u00e0 ce que tous les caract\u00e8res du mot recherch\u00e9 soient identiques.","title":"M\u00e9thode na\u00efve"},{"location":"Terminale/RechercheTextuelle/Cours/#question-1","text":"Impl\u00e9mentez cet algorithme en Python. Testez-le avec le texte et le mot \"chat\", puis avec le texte et le mot \"chien\". def rechercheNaive(texte, mot): \"\"\" Recherche le mot dans le texte @param texte: str, le texte dans lequel on recherche le mot @param mot: str, le mot \u00e0 rechercher @return: bool \"\"\" Cette m\u00e9thode fonctionne mais elle est tr\u00e8s lente. Si le mot recherch\u00e9 n'est pas dans le texte on doit quand meme r\u00e9aliser toutes les comparaisons avec chacun des caract\u00e8res du texte. On va donc chercher \u00e0 am\u00e9liorer cet algorithme.","title":"Question 1"},{"location":"Terminale/RechercheTextuelle/Cours/#methode-de-boyer-moore-horspool","text":"La m\u00e9thode de Boyer-Moore est un algorithme de recherche textuelle se base sur 2 principes pour am\u00e9liorer la recherche : Comparer les caract\u00e8res du mot recherch\u00e9 en commen\u00e7ant par la fin du mot. Utiliser une table de correspondance qui permet de sauter des caract\u00e8res du texte lorsqu'ils ne correspondent pas au caract\u00e8re recherch\u00e9.","title":"M\u00e9thode de Boyer-Moore Horspool"},{"location":"Terminale/RechercheTextuelle/Cours/#deroulement-de-lalgorithme","text":"Pour l'exemple on recherchera le mot \"chat\" dans le texte suivant : \"Le croustichat\" On commence la recherche \u00e0 l\u2019index 3 : un croustichat chat ^ Il n\u2019y a pas de correspondance \u00e0 la fin du mot : 't' != 'c', donc on avance, mais de combien de caract\u00e8res avance-t-on ? Pour le d\u00e9cider, on utilise le fait que le caract\u00e8re 'c' apparait 3 charact\u00e8res plus loin dans le mot cherch\u00e9, donc on peut avancer de 3 caract\u00e8res sans crainte de rater le mot. On recherche donc \u00e0 l\u2019indice 3 + 3 = 6 : un croustichat chat ^ 'u' est diff\u00e9rent de 'a', on va donc avancer. Mais cette fois, le caract\u00e8re 'u' n\u2019apparait pas dans le mot cherch\u00e9, donc on peut avancer de la taille du mot cherch\u00e9. On recherche donc \u00e0 l\u2019indice 6 + 4 = 10 : un croustichat chat ^ Cette fois 'c' fais parti du mot recherch\u00e9, on peut donc avancer selon sa position. Ici 'a' est le 4\u00e8me caract\u00e8re du mot cherch\u00e9, donc on avance de 3 caract\u00e8res. On recherche donc \u00e0 l\u2019indice 10 + 3 = 13 : un croustichat chat ^ Cette fois, 'c' est bien pr\u00e9sent dans le mot cherch\u00e9, on peut donc commencer \u00e0 comparer les caract\u00e8res du mot cherch\u00e9 en commen\u00e7ant par la fin. On compare donc 'c' et 'c', puis 'h' et 'h', puis 'a' et 'a', puis 't' et 't'. Tous les caract\u00e8res sont identiques, on a donc trouv\u00e9 le mot cherch\u00e9.","title":"D\u00e9roulement de l\u2019algorithme"},{"location":"Terminale/RechercheTextuelle/Cours/#table-de-correspondance","text":"Pour pouvoir avancer de plusieurs caract\u00e8res, on va utiliser une table de correspondance qui permet de savoir de combien on peut avancer en fonction du caract\u00e8re du texte. Pour le mot \"chat\", la table de correspondance est la suivante : Caract\u00e8re c h a t (autres charact\u00e8res) Index 3 2 1 0 4 Si une lettre se r\u00e9p\u00e8te plusieurs fois, on veut uniquement sa derni\u00e8re position dans le mot car on compare en commen\u00e7ant par la fin. Le mot \"abcba\" aura donc la m\u00eame table de correspondance : Caract\u00e8re a c b (autres charact\u00e8res) Index 3 2 1 3","title":"Table de correspondance"},{"location":"Terminale/RechercheTextuelle/Cours/#question-2","text":"Tracez la table de correspondance, puis appliquez l'algorithme de Boyer-Moore Horspool pour la recherche du mot \"anim\" dans le texte \"Un petit animal\"","title":"Question 2"},{"location":"Terminale/RechercheTextuelle/Cours/#implementation-en-python","text":"","title":"Impl\u00e9mentation en Python"},{"location":"Terminale/RechercheTextuelle/Cours/#question-3","text":"Ecrivez une fonction tableCorrespondance qui prend en param\u00e8tre un mot et qui renvoi la table de correspondance associ\u00e9e. On utilisera un dictionnaire pour stocker la table de correspondance. def tableCorrespondance(mot): \"\"\"Renvoi un dictionnaire repr\u00e9sentant la table de correspondance associ\u00e9e au mot. @Args : mot : le mot dont on veut la table de correspondance @Return : dict : la table de correspondance associ\u00e9e au mot \"\"\" tableCorrespondance(\"chat\") renverra le dictionnaire suivant : {'c': 3, 'h': 2, 'a': 1, 't': 0}","title":"Question 3"},{"location":"Terminale/RechercheTextuelle/Cours/#question-4","text":"Gr\u00e2ce \u00e0 la table de correspondance, on peut maintenant \u00e9crire une fonction avancer qui prend en param\u00e8tre un texte, un mot \u00e0 chercher et un indice du dernier charact\u00e8re du mot \u00e0 partir duquel on va tester et qui renvoi l'indice \u00e0 partir duquel on doit rechercher le mot suivant. def avancer(texte, mot, indice): \"\"\" Renvoi l'indice \u00e0 partir duquel on doit rechercher le mot suivant. @Args texte: str, le texte dans lequel on recherche le mot mot: str, le mot \u00e0 rechercher indice: int, l'indice du dernier charact\u00e8re du mot \u00e0 partir duquel on va tester @Return: int, l'indice \u00e0 partir duquel on doit rechercher le mot suivant \"\"\"","title":"Question 4"},{"location":"Terminale/RechercheTextuelle/Cours/#question-5","text":"Impl\u00e9mentez en Python une fonction memeMot telle que : def memeMot(texte, mot, indice): \"\"\" Verifie \u00e0 partir de l'indice de dernier charact\u00e8re \"indice\" si le mot \"mot\" correspond \u00e0 celui dans le texte. Renvoi l'indice du premier charact\u00e8re diff\u00e9rent ou -1 si le mot correspond. \"\"\" memeMot(\"un croustichat\", \"chat\", 6) comparera \"chat\" avec \"crou\" et renverra 0 car le premier charact\u00e8re diff\u00e9rent est 'u' \u00e0 l'indice 0. memeMot(\"un croustichat\", \"chat\", 13) comparera \"chat\" avec \"chat\" et renverra -1 car les mots sont identiques. Cette fonction sera utilis\u00e9e pour tester si le mot recherch\u00e9 est pr\u00e9sent \u00e0 un indice donn\u00e9 du texte.","title":"Question 5"},{"location":"Terminale/RechercheTextuelle/Cours/#question-6","text":"Utilisez les fonctions pr\u00e9c\u00e9dentes pour compl\u00e9ter le code de la fonction rechercheBoyerMoore qui prend en param\u00e8tre un texte et un mot et qui renvoi si le mot est pr\u00e9sent dans le texte. Le code \u00e0 compl\u00e9ter est disponible dans le fichier rechercheBoyerMoore.py Vous pourrez tester votre code avec le code suivant : # Tests assert recherche_mot_boyer('Le croustichat', 'chat') assert recherche_mot_boyer('Le croustichat', 'chien') is False assert recherche_mot_boyer('Le croustichat', 'crou') assert recherche_mot_boyer('Le croustichat', 'alice') is False","title":"Question 6"}]}